import logging
import os
import pandas as pd
from aiogram import Bot, Dispatcher, executor, types
from tradingview_ta import TA_Handler, Interval

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (—Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
SYMBOLS = ["BTCUSDT", "ETHUSDT", "XRPUSDT"]

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
TIMEFRAMES = {
    "1h": Interval.INTERVAL_1_HOUR,
    "4h": Interval.INTERVAL_4_HOURS,
    "1d": Interval.INTERVAL_1_DAY,
}

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ TradingView ===
def fetch_klines(symbol: str, interval: str):
    try:
        tv_interval = TIMEFRAMES.get(interval, Interval.INTERVAL_1_HOUR)

        handler = TA_Handler(
            symbol=symbol,
            screener="crypto",
            exchange="BINANCE",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "COINBASE" –∏–ª–∏ "KUCOIN"
            interval=tv_interval,
        )

        analysis = handler.get_analysis()
        indicators = analysis.indicators
        summary = analysis.summary

        # –î–µ–ª–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        df = pd.DataFrame([indicators])
        df["BUY"] = summary.get("BUY", 0)
        df["SELL"] = summary.get("SELL", 0)
        df["NEUTRAL"] = summary.get("NEUTRAL", 0)

        return df
    except Exception as e:
        logging.error(f"TradingView fetch failed for {symbol} {interval}: {e}")
        raise RuntimeError(f"TradingView fetch failed for {symbol} {interval}: {e}")

# === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ===
def build_report(symbol: str):
    report = f"üìä –û—Ç—á—ë—Ç –ø–æ {symbol}\n"
    for tf in TIMEFRAMES.keys():
        try:
            df = fetch_klines(symbol, tf)
            if df is not None and not df.empty:
                buy = df['BUY'].iloc[0]
                sell = df['SELL'].iloc[0]
                neutral = df['NEUTRAL'].iloc[0]
                report += f"\n‚è± {tf}:\n‚úÖ BUY: {buy}\n‚ùå SELL: {sell}\n‚ûñ NEUTRAL: {neutral}\n"
            else:
                report += f"\n‚è± {tf}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        except Exception as e:
            report += f"\n‚è± {tf}: –û—à–∏–±–∫–∞ ({e})\n"
    return report

# === Telegram-–∫–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å TradingView.\n"
                        "–ù–∞–ø–∏—à–∏ /report, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç.")

@dp.message_handler(commands=["report"])
async def send_report(message: types.Message):
    reply = ""
    for symbol in SYMBOLS:
        reply += build_report(symbol) + "\n\n"
    await message.reply(reply)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
