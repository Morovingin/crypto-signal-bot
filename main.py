import os
import logging
import asyncio
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

from fastapi import FastAPI
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from dotenv import load_dotenv

# =======================
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# =======================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger("main")

# =======================
# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =======================
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

if not CHAT_ID:
    raise ValueError("‚ùå CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# =======================
# üîπ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# =======================
app = FastAPI(title="Trading Bot Reporter")

# =======================
# üîπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
# =======================
scheduler = AsyncIOScheduler()

# =======================
# üîπ Telegram Application
# =======================
tg_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# =======================
# üîπ –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
# =======================
def generate_fake_report():
    """–§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞"""
    now = datetime.now()
    times = [now - timedelta(hours=i) for i in range(24)][::-1]
    prices = np.cumsum(np.random.randn(24)) + 100

    df = pd.DataFrame({"time": times, "price": prices})
    return df

def plot_report(df: pd.DataFrame, filename: str = "report.png") -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ PNG"""
    plt.figure(figsize=(10, 4))
    plt.plot(df["time"], df["price"], label="Price")
    plt.title("Test Report")
    plt.xlabel("Time")
    plt.ylabel("Price")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()
    return filename

async def send_report(context: ContextTypes.DEFAULT_TYPE, test: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ Telegram"""
    try:
        df = generate_fake_report()
        filename = plot_report(df, "report.png")

        title = "üìä –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç" if test else "üìà –ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç"
        await context.bot.send_message(chat_id=CHAT_ID, text=title)
        await context.bot.send_photo(chat_id=CHAT_ID, photo=open(filename, "rb"))

        logger.info("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram (%s)", title)
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: %s", str(e))

# =======================
# üîπ –ö–æ–º–∞–Ω–¥—ã Telegram
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–µ–ø–æ—Ä—Ç—ë—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/test ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç")

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
    await send_report(context, test=True)

# =======================
# üîπ –ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
# =======================
async def hourly_task():
    """–ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç"""
    class DummyContext:
        bot = tg_app.bot
    await send_report(DummyContext(), test=False)

async def daily_task():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç"""
    class DummyContext:
        bot = tg_app.bot
    await send_report(DummyContext(), test=False)

# =======================
# üîπ FastAPI —Å–æ–±—ã—Ç–∏—è
# =======================
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    tg_app.add_handler(CommandHandler("start", start))
    tg_app.add_handler(CommandHandler("test", test))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(hourly_task, IntervalTrigger(hours=1), id="hourly_task")
    scheduler.add_job(daily_task, IntervalTrigger(days=1), id="daily_task")
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ uvicorn event loop
    asyncio.create_task(tg_app.run_polling())

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    scheduler.shutdown()

# =======================
# üîπ Root endpoint
# =======================
@app.get("/")
async def root():
    return {"status": "ok", "message": "Trading bot reporter is running"}
