import os
import logging
import datetime
import httpx
import matplotlib.pyplot as plt
from io import BytesIO

from fastapi import FastAPI
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# -------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# -------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # ID —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç–∞
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# -------------------
# FastAPI
# -------------------
app = FastAPI()

# -------------------
# Telegram Bot
# -------------------
tg_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# -------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Bybit
# -------------------
async def fetch_klines(symbol: str, interval: str = "60", limit: int = 3):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —Å Bybit (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
    url = "https://api.bybit.com/v5/market/kline"
    params = {
        "category": "linear",
        "symbol": symbol,
        "interval": interval,
        "limit": limit
    }
    async with httpx.AsyncClient() as client:
        resp = await client.get(url, params=params, timeout=10.0)
        resp.raise_for_status()
        data = resp.json()
        if "result" in data and "list" in data["result"]:
            return data["result"]["list"]
        return []

async def generate_report(symbol: str = "BTCUSDT"):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞"""
    try:
        candles = await fetch_klines(symbol, interval="60", limit=3)
        if not candles:
            return f"‚õî –û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}"

        # –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±–µ—Ä—ë–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è)
        closes = [float(c[4]) for c in candles]
        avg_price = sum(closes) / len(closes)

        text = (
            f"üìä Report for {symbol}\n"
            f"‚è± Time: {datetime.datetime.utcnow().isoformat()}\n"
            f"Last close prices: {closes}\n"
            f"Average: {avg_price:.4f}\n"
        )
        return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_report: {e}")
        return f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–ª—è {symbol}: {e}"

# -------------------
# –ö–æ–º–∞–Ω–¥—ã Telegram
# -------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ —Å Bybit.")

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test ‚Äî –≤—Ä—É—á–Ω—É—é –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç"""
    report = await generate_report("BTCUSDT")
    await update.message.reply_text(report)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
tg_app.add_handler(CommandHandler("start", start_command))
tg_app.add_handler(CommandHandler("test", test_command))

# -------------------
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
# -------------------
scheduler = AsyncIOScheduler()

async def hourly_task():
    """–ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç"""
    report = await generate_report("BTCUSDT")
    await tg_app.bot.send_message(chat_id=CHAT_ID, text="‚è± Hourly Report:\n" + report)

async def daily_task():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç"""
    report = await generate_report("BTCUSDT")
    await tg_app.bot.send_message(chat_id=CHAT_ID, text="üìå Daily Report:\n" + report)

scheduler.add_job(hourly_task, "cron", minute=0)
scheduler.add_job(daily_task, "cron", hour=0, minute=0)

# -------------------
# FastAPI —Å–æ–±—ã—Ç–∏—è
# -------------------
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    scheduler.start()
    await tg_app.initialize()
    await tg_app.start()
    logger.info("‚úÖ Telegram Bot –∏ Scheduler –∑–∞–ø—É—â–µ–Ω—ã")

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    scheduler.shutdown()
    await tg_app.stop()
    await tg_app.shutdown()
    logger.info("‚úÖ Telegram Bot –∏ Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# -------------------
# HTTP endpoint –¥–ª—è Render
# -------------------
@app.get("/")
async def root():
    return {"status": "ok", "time": datetime.datetime.utcnow().isoformat()}
