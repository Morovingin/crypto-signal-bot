import os
import io
import logging
import httpx
import pandas as pd
import matplotlib.pyplot as plt

from fastapi import FastAPI
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# =======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# =======================
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI
app = FastAPI()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

# Telegram Bot
tg_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()


# =======================
# Bybit API
# =======================
async def fetch_klines(symbol: str, interval: str = "60", limit: int = 3, category: str = "spot"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ —Å Bybit API
    """
    url = "https://api.bybit.com/v5/market/kline"
    params = {"category": category, "symbol": symbol, "interval": interval, "limit": limit}
    async with httpx.AsyncClient() as client:
        resp = await client.get(url, params=params, timeout=10.0)
        data = resp.json()

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ Render
        logger.info(f"Bybit API response for {symbol}/{category}: {data}")

        return data.get("result", {}).get("list", [])


# =======================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
# =======================
async def generate_report(symbol: str = "BTCUSDT"):
    klines = await fetch_klines(symbol, interval="60", limit=3, category="spot")

    if not klines:
        return f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Bybit –¥–ª—è {symbol}"

    df = pd.DataFrame(klines, columns=["timestamp", "open", "high", "low", "close", "volume", "turnover"])
    df["close"] = df["close"].astype(float)

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(6, 3))
    plt.plot(df["close"], marker="o")
    plt.title(f"{symbol} ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(df)} —Å–≤–µ—á–µ–π")
    plt.xlabel("–°–≤–µ—á–∏")
    plt.ylabel("–¶–µ–Ω–∞")
    plt.grid()

    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    return buf


# =======================
# Telegram Handlers
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á—ë—Ç–∞.")


async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buf = await generate_report("BTCUSDT")
    if isinstance(buf, str):
        await update.message.reply_text(buf)
    else:
        await update.message.reply_photo(photo=buf, caption="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç ‚úÖ")


# =======================
# –ó–∞–¥–∞—á–∏ APScheduler
# =======================
async def hourly_task():
    buf = await generate_report("BTCUSDT")
    if isinstance(buf, str):
        await tg_app.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=buf)
    else:
        await tg_app.bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=buf, caption="–ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç")


async def daily_task():
    buf = await generate_report("BTCUSDT")
    if isinstance(buf, str):
        await tg_app.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=buf)
    else:
        await tg_app.bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=buf, caption="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç")


# =======================
# FastAPI Events
# =======================
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –ö–æ–º–∞–Ω–¥—ã Telegram
    tg_app.add_handler(CommandHandler("start", start))
    tg_app.add_handler(CommandHandler("test", test))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(hourly_task, "interval", hours=1, id="hourly_task")
    scheduler.add_job(daily_task, "interval", days=1, id="daily_task")
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    tg_app.create_task(tg_app.run_polling())


@app.get("/")
async def root():
    return {"status": "ok", "message": "FastAPI —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}
